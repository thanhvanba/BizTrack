import { Card, Row, Col, Typography, Table, Divider, Button, Spin, message } from "antd";
import { CopyOutlined, PrinterOutlined, SaveOutlined, ShareAltOutlined } from "@ant-design/icons";
import formatPrice from "../../utils/formatPrice";
import PrintInvoice from "../PrintInvoice";
import {
  convertInvoiceToImageAndCopy,
  convertInvoiceToImageAndSave,
  convertInvoiceToImageAndShare
} from "../../utils/invoiceToImageUtils";
import React, { useState } from "react";
import { useLocation } from "react-router-dom";
import { COMPANY } from "../../config/companyConfig";

const { Title, Text } = Typography;

export default function PurchaseOrderDetail({ order }) {
  const location = useLocation();
  console.log("üöÄ ~ PurchaseOrderDetail ~ order:", order)
  const [printInvoiceVisible, setPrintInvoiceVisible] = useState(false);
  const [isCopyingImage, setIsCopyingImage] = useState(false);
  const [isSavingImage, setIsSavingImage] = useState(false);
  const [isSharingImage, setIsSharingImage] = useState(false);

  const totalAmount = order?.details?.reduce((sum, detail) => {
    const subtotal = detail.quantity * (detail.price ?? detail.item_return_price);
    const vatAmount = subtotal * (detail.vat_rate || 0) / 100;
    return sum + subtotal + vatAmount;
  }, 0);

  const subtotalAmount = order?.details?.reduce((sum, detail) => sum + detail.quantity * (detail.price ?? detail.item_return_price), 0);
  const totalVatAmount = order?.details?.reduce((sum, detail) => {
    const subtotal = detail.quantity * (detail.price ?? detail.item_return_price);
    return sum + (subtotal * (detail.vat_rate || 0) / 100);
  }, 0);

  // Chu·∫©n h√≥a d·ªØ li·ªáu h√≥a ƒë∆°n nh·∫≠p h√†ng cho PrintInvoice
  const purchaseInvoiceData = order ? {
    invoiceNumber: order.po_id || order.return_id,
    date: order.posted_at ? new Date(order.posted_at).toLocaleString() : new Date(order.created_at).toLocaleString(),
    customer: {
      name: order.supplier_name,
      phone: order.supplier_phone || '',
      address: order.supplier_address || '',
    },
    company: {
      name: COMPANY.name,
      phone: COMPANY.phone,
      address: order.warehouse_name ? `${order.warehouse_name}` : COMPANY.address,
    },
    items: (order.details || []).map(detail => {
      const subtotal = (detail.quantity || 0) * (detail.price ?? detail.refund_amount);
      const vatAmount = subtotal * (detail.vat_rate || 0) / 100;
      return {
        name: detail.product_name,
        unitPrice: detail.price ?? detail.refund_amount,
        quantity: detail.quantity,
        vatRate: detail.vat_rate || 0,
        vatAmount: vatAmount,
        amount: subtotal + vatAmount,
      };
    }),
    subtotal: subtotalAmount,
    totalVat: totalVatAmount,
    total: totalAmount,
    discount: order.discount || 0,
    shippingFee: order.shipping_fee || 0,
    amountPaid: order.amount_paid || 0,
    note: order.note,
    finalTotal: (totalAmount - (order.discount || 0) + (order.shipping_fee || 0)),
  } : null;

  const handleCopyImage = async () => {
    if (isCopyingImage) return; // Prevent multiple clicks

    setIsCopyingImage(true);

    try {
      const success = await convertInvoiceToImageAndCopy(
        purchaseInvoiceData,
        location.pathname.includes('purchase-return') ? 'purchase_return' : 'purchase'
      );

      if (success) {
        message.success({
          content: '‚úÖ ƒê√£ copy h√¨nh ·∫£nh h√≥a ƒë∆°n nh·∫≠p h√†ng v√†o clipboard! B·∫°n c√≥ th·ªÉ paste v√†o chat ƒë·ªÉ g·ª≠i cho nh√† cung c·∫•p.',
          duration: 4,
        });
      } else {
        message.error('‚ùå Kh√¥ng th·ªÉ copy h√¨nh ·∫£nh v√†o clipboard. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } catch (error) {
      console.error('Error copying invoice image:', error);
      message.error('‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi h√≥a ƒë∆°n: ' + error.message);
    } finally {
      setIsCopyingImage(false);
    }
  };

  const handleSaveImage = async () => {
    if (isSavingImage) return; // Prevent multiple clicks

    setIsSavingImage(true);

    try {
      const success = await convertInvoiceToImageAndSave(
        purchaseInvoiceData,
        location.pathname.includes('purchase-return') ? 'purchase_return' : 'purchase'
      );

      if (success) {
        message.success({
          content: 'üíæ ƒê√£ l∆∞u h√¨nh ·∫£nh h√≥a ƒë∆°n nh·∫≠p h√†ng v√†o thi·∫øt b·ªã!',
          duration: 4,
        });
      } else {
        message.error('‚ùå Kh√¥ng th·ªÉ l∆∞u h√¨nh ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } catch (error) {
      console.error('Error saving invoice image:', error);
      message.error('‚ùå L·ªói khi l∆∞u h√≥a ƒë∆°n: ' + error.message);
    } finally {
      setIsSavingImage(false);
    }
  };

  const handleShareImage = async () => {
    if (isSharingImage) return; // Prevent multiple clicks

    setIsSharingImage(true);

    try {
      const success = await convertInvoiceToImageAndShare(
        purchaseInvoiceData,
        location.pathname.includes('purchase-return') ? 'purchase_return' : 'purchase'
      );

      if (success) {
        message.success({
          content: 'üì§ ƒê√£ share h√≥a ƒë∆°n nh·∫≠p h√†ng l√™n m·∫°ng x√£ h·ªôi!',
          duration: 4,
        });
      } else {
        message.error('‚ùå Kh√¥ng th·ªÉ share h√≥a ƒë∆°n. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } catch (error) {
      console.error('Error sharing invoice image:', error);
      message.error('‚ùå L·ªói khi share h√≥a ƒë∆°n: ' + error.message);
    } finally {
      setIsSharingImage(false);
    }
  };

  const columns = [
    {
      title: "M√£ s·∫£n ph·∫©m",
      dataIndex: "product_id",
      key: "product_id",
    },
    {
      title: "T√™n s·∫£n ph·∫©m",
      dataIndex: "product_name",
      key: "product_name",
      render: (name) => name || "Kh√¥ng x√°c ƒë·ªãnh",
    },
    {
      title: "S·ªë l∆∞·ª£ng",
      dataIndex: "quantity",
      key: "quantity",
      align: "center",
    },
    {
      title: "ƒê∆°n gi√°",
      dataIndex: "price",
      key: "price",
      align: "right",
      render: (_, detail) => formatPrice(detail.price ?? detail.item_return_price),
    },
    {
      title: "VAT",
      key: "vat",
      align: "center",
      render: (_, detail) => {
        const subtotal = (detail.quantity || 0) * (detail.price ?? detail.item_return_price);
        const vatAmount = subtotal * (detail.vat_rate || 0) / 100;
        return (
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '12px', color: '#666' }}>{detail.vat_rate || 0}%</div>
            <div style={{ fontSize: '13px', fontWeight: '500' }}>{formatPrice(vatAmount)}</div>
          </div>
        );
      },
    },
    {
      title: "Th√†nh ti·ªÅn",
      key: "total",
      align: "right",
      render: (_, detail) => {
        const subtotal = (detail.quantity || 0) * (detail.price ?? detail.item_return_price);
        const vatAmount = subtotal * (detail.vat_rate || 0) / 100;
        return formatPrice(subtotal + vatAmount);
      },
    },
  ];

  return (
    <Card bordered className="mb-4">
      <Row gutter={[16, 8]}>
        <Col xs={24} md={8}>
          <Text type="secondary">M√£ ƒë∆°n h√†ng</Text>
          <div className="font-medium">{order?.po_id || order?.return_id}</div>
        </Col>
        <Col xs={24} md={8}>
          <Text type="secondary">Tr·∫°ng th√°i</Text>
          <div>
            <span
              className={`inline-block px-3 py-1 rounded-full text-xs font-medium ${order?.status === "draft" || order?.status === "pending"
                ? "bg-orange-100 text-orange-800"
                : "bg-green-100 text-green-800"
                }`}
            >
              {order?.status === "draft" || order?.status === "pending" ? "Ch·ªù duy·ªát" :
                order?.status === "approved" ? "ƒê√£ tr·∫£" :
                  order?.status === "posted" ? "ƒê√£ nh·∫≠p" : "ƒê√£ nh·∫≠p"}
            </span>
          </div>
        </Col>
        <Col xs={24} md={8}>
          <Text type="secondary">Nh√† cung c·∫•p</Text>
          <div className="font-medium">{order?.supplier_name}</div>
        </Col>
        <Col xs={24} md={8}>
          <Text type="secondary">Kho nh·∫≠p h√†ng</Text>
          <div className="font-medium">{order?.warehouse_name}</div>
        </Col>
        {order?.posted_at && (
          <Col xs={24} md={8}>
            <Text type="secondary">Ng√†y ph√™ duy·ªát</Text>
            <div className="font-medium">{new Date(order?.posted_at).toLocaleString()}</div>
          </Col>
        )}
        <Col xs={24}>
          <Text type="secondary">Ghi ch√∫</Text>
          <div className="font-medium">{order?.note || "Kh√¥ng c√≥ ghi ch√∫"}</div>
        </Col>
      </Row>

      <Divider />

      <Table
        columns={columns}
        dataSource={order?.details || []}
        rowKey="po_detail_id"
        pagination={false}
        size="small"
        summary={() => (
          <>
            <Table.Summary.Row>
              <Table.Summary.Cell colSpan={5} align="right" style={{ paddingTop: '12px' }}>
                <Text strong>T·∫°m t√≠nh:</Text>
              </Table.Summary.Cell>
              <Table.Summary.Cell align="right" style={{ paddingTop: '12px' }}>
                <Text strong>{formatPrice(subtotalAmount)}</Text>
              </Table.Summary.Cell>
            </Table.Summary.Row>
            <Table.Summary.Row>
              <Table.Summary.Cell colSpan={5} align="right">
                <Text strong>VAT:</Text>
              </Table.Summary.Cell>
              <Table.Summary.Cell align="right">
                <Text strong>{formatPrice(totalVatAmount)}</Text>
              </Table.Summary.Cell>
            </Table.Summary.Row>
            <Table.Summary.Row>
              <Table.Summary.Cell colSpan={5} align="right" style={{ paddingBottom: '12px' }}>
                <Text strong>T·ªïng gi√° tr·ªã:</Text>
              </Table.Summary.Cell>
              <Table.Summary.Cell align="right" style={{ paddingBottom: '12px' }}>
                <Text strong className="text-xl">{formatPrice(totalAmount)}</Text>
              </Table.Summary.Cell>
            </Table.Summary.Row>
          </>
        )}
      />

      <div className="mt-4 flex gap-3">
        <Button
          type="primary"
          icon={<PrinterOutlined />}
          onClick={() => setPrintInvoiceVisible(true)}
          disabled={isCopyingImage || isSavingImage || isSharingImage}
        >
          In h√≥a ƒë∆°n
        </Button>
        <Button
          icon={isCopyingImage ? <Spin size="small" /> : <CopyOutlined />}
          onClick={handleCopyImage}
          loading={isCopyingImage}
          disabled={isCopyingImage || isSavingImage || isSharingImage}
          title={isCopyingImage ? "ƒêang chuy·ªÉn ƒë·ªïi h√≥a ƒë∆°n th√†nh h√¨nh ·∫£nh..." : "Copy h√¨nh ·∫£nh h√≥a ƒë∆°n ƒë·ªÉ g·ª≠i cho nh√† cung c·∫•p"}
        >
          {isCopyingImage ? 'ƒêang x·ª≠ l√Ω...' : 'Copy h√¨nh ·∫£nh'}
        </Button>

        <Button
          icon={isSavingImage ? <Spin size="small" /> : <SaveOutlined />}
          onClick={handleSaveImage}
          loading={isSavingImage}
          disabled={isCopyingImage || isSavingImage || isSharingImage}
          title={isSavingImage ? "ƒêang l∆∞u h√¨nh ·∫£nh h√≥a ƒë∆°n..." : "L∆∞u h√¨nh ·∫£nh h√≥a ƒë∆°n v√†o thi·∫øt b·ªã"}
        >
          {isSavingImage ? 'ƒêang l∆∞u...' : 'L∆∞u ·∫£nh'}
        </Button>

        <span className="lg:hidden">
          <Button
            icon={isSharingImage ? <Spin size="small" /> : <ShareAltOutlined />}
            onClick={handleShareImage}
            loading={isSharingImage}
            disabled={isCopyingImage || isSavingImage || isSharingImage}
            title={isSharingImage ? "ƒêang share h√≥a ƒë∆°n..." : "Share h√≥a ƒë∆°n l√™n m·∫°ng x√£ h·ªôi"}
          >
            {isSharingImage ? 'ƒêang share...' : 'Share'}
          </Button>
        </span>
      </div>

      <PrintInvoice
        visible={printInvoiceVisible}
        onClose={() => setPrintInvoiceVisible(false)}
        invoiceData={purchaseInvoiceData}
        type={location.pathname.includes('purchase-return') ? 'purchase_return' : 'purchase'}
      />
    </Card>
  );
}
