import { Alert, Spin, Table, Tag } from "antd";
import { useEffect, useState } from "react";
import CustomerReportService from "../../service/customerReportService";
const columns = [
  { title: "M√£ h√≥a ƒë∆°n", dataIndex: "code", key: "code" },
  { title: "Th·ªùi gian", dataIndex: "date", key: "date" },
  { title: "Ng∆∞·ªùi b√°n", dataIndex: "seller", key: "seller" },
  {
    title: "T·ªïng c·ªông",
    dataIndex: "total",
    key: "total",
    align: "right",
    render: (val) => `${val < 0 ? "-" : ""}${Math.abs(val).toLocaleString()}‚Ç´`,
  },
  {
    title: "Tr·∫°ng th√°i",
    dataIndex: "status",
    key: "status",
    render: (_, record) => {
      const status = record.status;
      let text = status;
      let color = "default";

      if (status === "ƒê√£ tr·∫£") {
        color = "blue";
      } else if (status === "Ho√†n th√†nh") {
        color = "green";
      }

      return <Tag color={color}>{text}</Tag>;
    },
  },
];

// const CustomerSaleReturnTab = () => {
//   return <Table columns={columns} dataSource={data} pagination={false} size="middle" scroll={{ x: 800 }} />;
// };

const CustomerSaleReturnTab = ({ customerId }) => {
  console.log("üöÄ ~ CustomerSaleReturnTab ~ customerData:", customerId);

  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [dataSource, setDataSource] = useState([]);

  useEffect(() => {
    const fetchOrderHistory = async () => {
      // ƒê·ªïi t√™n h√†m th√†nh fetchOrderHistory
      if (!customerId) {
        setLoading(false);
        setError("Kh√¥ng c√≥ ID kh√°ch h√†ng ƒë·ªÉ t·∫£i b√°o c√°o.");
        return;
      }

      try {
        setLoading(true);
        setError(null);
        const orderHistory =
          await CustomerReportService.getCustomerOrderHistory(customerId);
        const mappedData = orderHistory.data?.map((order, index) => {
          console.log("üöÄ ~ CustomerSaleReturnTab ~ orderHistory:", order);

          return {
            key: order.order_id || index.toString(), 
            code: order.order_code, 
            date: new Date(order.created_at).toLocaleString(), 
            performer: order.customer_id, 
            total: parseFloat(order.final_amount), 
            status: order.order_status, 
          };
        });
        setDataSource(mappedData);
      } catch (err) {
        console.error("L·ªói khi t·∫£i l·ªãch s·ª≠ ƒë∆°n h√†ng:", err);
        setError("Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.");
      } finally {
        setLoading(false);
      }
    };

    fetchOrderHistory(); // G·ªçi h√†m fetchOrderHistory
  }, [customerId]); // Ch·∫°y l·∫°i useEffect khi customerId thay ƒë·ªïi

  if (loading) {
    return (
      <Spin
        tip="ƒêang t·∫£i l·ªãch s·ª≠ ƒë∆°n h√†ng..."
        size="large"
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          minHeight: "200px",
        }}
      />
    );
  }

  if (error) {
    return <Alert message="L·ªói" description={error} type="error" showIcon />;
  }

  return (
    <Table
      columns={columns}
      dataSource={dataSource}
      pagination={false} // T√πy ch·ªçn: b·∫°n c√≥ th·ªÉ b·∫≠t ph√¢n trang n·∫øu mu·ªën
      size="middle"
      scroll={{ x: 800 }} // Cho ph√©p cu·ªôn ngang n·∫øu b·∫£ng qu√° r·ªông
      locale={{ emptyText: "Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ b√°n/tr·∫£ h√†ng." }} // Tin nh·∫Øn khi kh√¥ng c√≥ d·ªØ li·ªáu
    />
  );
};

export default CustomerSaleReturnTab;
